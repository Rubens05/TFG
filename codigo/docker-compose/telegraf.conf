# Agent for debugging
[agent]
  debug = true
  logtarget = "stderr"

  # MQTT Configuration

  # Read metrics from MQTT topic(s)
  [[inputs.mqtt_consumer]]
    ## Broker URLs for the MQTT server or cluster.  To connect to multiple
    ## clusters or standalone servers, use a separate plugin instance.
    ##   example: servers = ["tcp://localhost:1883"]
    ##            servers = ["ssl://localhost:1883"]
    ##            servers = ["ws://localhost:1883"]
    servers = ["tcp://mqtt5:1883"] 
    ## Topics that will be subscribed to.
    topics = [
      "topicX",
      "your/topic/here",
      "sensors/#",
      "#",
    ]

    ## The message topic will be stored in a tag specified by this value.  If set
    ## to the empty string no topic tag will be created.
    # topic_tag = "topic"

    ## QoS policy for messages
    ##   0 = at most once
    ##   1 = at least once
    ##   2 = exactly once
    ##
    ## When using a QoS of 1 or 2, you should enable persistent_session to allow
    ## resuming unacknowledged messages.
    # qos = 0

    ## Connection timeout for initial connection in seconds
    connection_timeout = "30s"

    ## Maximum messages to read from the broker that have not been written by an
    ## output.  For best throughput set based on the number of metrics within
    ## each message and the size of the output's metric_batch_size.
    ##
    ## For example, if each message from the queue contains 10 metrics and the
    ## output metric_batch_size is 1000, setting this to 100 will ensure that a
    ## full batch is collected and the write is triggered immediately without
    ## waiting until the next flush_interval.
    # max_undelivered_messages = 1000

    ## Persistent session disables clearing of the client session on connection.
    ## In order for this option to work you must also set client_id to identify
    ## the client.  To receive messages that arrived while the client is offline,
    ## also set the qos option to 1 or 2 and don't forget to also set the QoS when
    ## publishing.
    # persistent_session = false

    ## If unset, a random client ID will be generated.
    client_id = "mosquitto-broker"

    ## Username and password to connect MQTT server.
    username = "user" ## Set your user
    password = "user1" ## Set your password

    ## Data format to consume.
    ## Each data format has its own unique set of configuration options, read
    ## more about them here:
    ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
    data_format = "json"
    topic_tag = "" # This will not store the topic in a tag
    json_time_key = "timestamp"
    json_time_format = "January 02 2006 15:04:05" # Date format of the timestamp field
    json_string_fields = ["idSender", "topic", "level", "message"] # String fields 

[[processors.override]]
  name_override = "LogRegistry"


# A plugin that can transmit logs to mongodb
[[outputs.mongodb]]
  # connection string examples for mongodb
  dsn = "mongodb://mongoadmin:mongopassword@mongo:27017" # Cambiado para que apunte al nombre del servicio del contenedor de MongoDB en Docker Compose

  # overrides serverSelectionTimeoutMS in dsn if set
  # timeout = "30s"

  # default authentication, optional
  # authentication = "NONE"

  # # for SCRAM-SHA-256 authentication
  # authentication = "SCRAM"
  username = "mongoadmin"
  password = "mongopassword"
 
  # for x509 certificate authentication
  # authentication = "X509"
  # tls_ca = "ca.pem"
  # tls_key = "client.pem"
  # # tls_key_pwd = "changeme" # required for encrypted tls_key
  # insecure_skip_verify = false

  # database to store measurements and time series collections
  database = "Data"

  # granularity can be seconds, minutes, or hours.
  # configuring this value will be based on your input collection frequency.
  # see https://docs.mongodb.com/manual/core/timeseries-collections/#create-a-time-series-collection
  # granularity = "seconds"

  # optionally set a TTL to automatically expire documents from the measurement collections.
  #ttl = "360h"

